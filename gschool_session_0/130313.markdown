---
layout: page
title: Wednesday, March 13th
---

## Daily Outline

* Warm-Up
* Focus Week Group Sessions

## Focus Week Sessions

This week while we split into three groups we'll have to make use of several different spaces around the building to accomodate other residents and events.

For today:

* Jeff's group will meet in the Primary Classroom
* Katrina's group will meet in Public Conference Room **West**
* Frank's group will meet in Public Conference Room **East** until lunch, Secondary Classroom after lunch

### Jeff's Group

* http://tutorials.jumpstartlab.com/projects/sales_engine_web.html
* 9:30-10:30 -- Independent work: Hopefully have finders done, relationships done or almost done
* 10:30 -- Ideas on simplifying relationships
* 11:30 -- Implementing Controllers
* 2:00+ -- Independent Work

### Frank's Group

* http://tutorials.jumpstartlab.com/projects/jet_fuel.html

### Katrina's Group

* 9:30-10:30 -- With Jeff
* 10:30+ -- With Katrina
* Assignments below

## Katrina's Group Work Plans

* Re-do today's warmup 'Chunks' collectively. We're asking for volunteers to be the person at the projector. Everyone can chip in and suggest tests, steps, or solutions.
* Questions? Let's clarify.
* In pairs: Solve 'Chunks' from scratch
* Questions? Let's clarify.
* In new pairs: Solve 'Say' (in english) from scratch
* Questions? Let's clarify.
* In new pairs: Solve 'Fruit Stand' from scratch
* Questions? Let's clarify
* In new pairs: Solve 'Phone Number' from scratch
* Questions? Let's clarify

### Chunky Numbers

Write a program that will take a number from 0 to 999,999,999,999 and break it into chunks (like you would insert commas in US English):

```ruby
Chunks.new(1234567890).split
# => [1, 234, 567, 890]

Chunks.new(1000).split
# => [0, 0, 1, 0]
```

The program must also report any values that are out of range.

### Say

Write a program that will take a number from 0 to 99 and spell out that number in English.

In other words, if the input to the program is `22`, then the output should be `'twenty-two'`

e.g.

```ruby
Say.new(22).in_english
```

```ruby
Say.new(-1).in_english
# say.rb:7:in 'in_english': Number must be between 0 and 99, inclusive. (ArgumentError)
```

The program must also report any values that are out of range.

Some good test cases for this program are:

* 0
* 19
* 50
* 98
* -1
* 100

### Fruit Stand

#### `#variety`

1. A new apple defaults to 'Granny Smith'
2. A new apple can be of another variety

#### Default slicing behavior

3. A new apple has 8 `#remaining_slices`
4. `#slice` takes off a single slice by default and gives it to you
5. When you've sliced one off, there are 7 left

#### Effective slicing behavior

6. `#slice(n)` slices off n slices and gives them to you
7. If you slice 5 slices off your apple, you have 3 `#remaining_slices`

#### Greedy slicing behavior

8. If you slice off more than you have, then you get however many
   slices are left.
   8.a) try: slice(9) off a new apple
   8.b) try: slice(3) three times in a row
9. If you slice off more than you have, then there are no `#remaining_slices`

#### `#ripe?` & `#unripe?`

10. Apples are still `#unripe?` after 9 seconds.
11. Apples are `#ripe?` 10 seconds after creating them.

### US Phone Number

1. Anything that is not a digit gets cleaned up.
   e.g. (123) 456-7890 becomes 1234567890
   e.g. 123.456.7890 becomes 1234567890
2. A number is valid if it is 10 digits.
3. A number is valid if it is 11 digits and the first is 1.
4. A valid 11 digit number gets the first digit removed.
   e.g. 11234567890 becomes 1234567890
5. An 11 digit number is invalid in all other cases.
6. A 9 digit number (or shorter) is invalid
7. A phone number has an `#area_code`
   e.g. for 1234567890 the area code is 123
8. A phone number can be pretty-printed (`#to_s`)
   e.g. 1234567890 becomes (123) 456-7890
