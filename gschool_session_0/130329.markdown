---
layout: page
title: Friday, March 29th
sidebar: true
---

## Daily Outline

* Retrospective
* Lightning Talks on "Open Source Ruby Apps"
* 1-on-1s
* Open Source + Personal Study + Rails Q&A

## Retrospective

It's important to look back and assess what we're doing right, what we're doing wrong, celebrate victories, and analyze defeats.

### Personal Writing

Please spend the first 35 minutes of today (9:00-9:35), writing and posting an article on your class blog reflecting on one or more of the following questions:

* What's the most confusing component of Rails? Why? Could it be simpler, or is it just solving a difficult problem?
* What did you think about the increased emphasis on pairing this week? Was it productive for you? Why or why not? What's challenging when you're pairing, and what's easier?
* How do you feel about acceptance testing after Joseph's talk Wednesday? Does your application make good use of acceptance tests?
* This is your first project working in groups larger than two. Do you feel like your progress is moving faster? If so, how much faster? What's been fun and what's been challenging about a larger group?
* What should we expect to see in your demo Thursday? Will it be amazing, decent, or crap?

### Group Conversation

Following the personal writing sessions, let's have a short group discussion reflecting on the week.

* What's your completion plan for the next five days?
* After the program, do you think you want to be a generalist, focus on the front-end, or on the back-end? Or something else?
* What was your favorite or least favorite thing we did this week?
* Who would you give a shout-out to for helping you with code, making it more exciting to come to work, or somehow improving your day?

## Lightning Talks

* Kareem on JRuby
* Erin on Rubinius
* John on Topaz
* Paul on mRuby
* Josh on MRI

### Post-Game

Beginning after the talks and continuing at lunch as necessary, the talkers should meet with Jeff to get direct feedbacks. 

## Marty Haught

* http://haughtcodeworks.com/
* https://twitter.com/mghaught
* http://martyhaught.com/

## 1-on-1s

### With Jeff in Conference Room 2 (downstairs)

* Raphael Weiner
* Shane Rogers
* Aimee Maher
* Jorge Tellez
* Kareem Grant
* Paul Blackwell
* Phil Battos
* Bradley Sheehan
* Christopher Knight
* Danny Garcia
* James Denman
* Jennifer Eliuk

### With Franklin in the War Room

* Geoffrey Schorkopf
* John Maddux
* Laura Steadman
* Logan Sears
* Blair Anderson
* Josh Mejia
* Kyle Suss
* Chelsea Komlo
* Daniel Mee
* Elaine Tai
* Erin Drummond

## Personal Study & Open Source

Use the time this afternoon to recouperate through learning. Please remember to **respect the Friday** and put in a solid effort.

### Open Source Work

We'd love to see you start contributing to Open Source projects. Please track your progress and let us know how it goes. 

### Rails Q&A

At 3PM in the main classroom Frank will run a general Rails Q&A. This is not a time to ask specific questions about StoreEngine.

### New Study Ideas

#### JSON & Rails

Just about every modern Rails application needs to deal with JSON. Here are a few methods for creating JSON and sending it to your users:

* RailsCast on `respond_with`: http://railscasts.com/episodes/224-controllers-in-rails-3
* RailsCast on `Jbuilder`: http://railscasts.com/episodes/320-jbuilder
* RailsCast on `RABL`: http://railscasts.com/episodes/322-rabl?view=asciicast

#### Other RailsCasts about Current Topics

* Two episodes on Routing, a different take on what we discussed Monday: http://railscasts.com/episodes/231-routing-walkthrough and http://railscasts.com/episodes/232-routing-walkthrough-part-2
* Two episodes on creating URLs that are more readable than just an embedded `id` number: http://railscasts.com/episodes/314-pretty-urls-with-friendlyid and http://railscasts.com/episodes/63-model-name-in-url-revised
* How you could choose to implement `DELETE` operations without JavaScript: http://railscasts.com/episodes/77-destroy-without-javascript-revised

#### Systems Maintainance and Automation

It's been a long time since you worked on your environment.

* What things have you been meaning to automate or simplify (within your system, terminal, or editor)?
* Are you learning the hotkeys in your editor? If not, study them.
* If you're not a VIM user, try working through `vimtutor` that Ben talked about

### Old Ideas

* Install Ruby 2.0 via RVM. 
  * Run some of your old code, like SalesEngine or warmups. Do things work as expected? Faster/slower?
  * Experiment with some of the new features explained in https://speakerdeck.com/shyouhei/whats-new-in-ruby-2-dot-0 and http://globaldev.co.uk/2012/11/ruby-2-0-0-preview-features/
* Read about and practice writing Rake tasks: http://jasonseifer.com/2010/04/06/rake-tutorial
  * Experimenting with writing a rake task to automate some part of your system or workflow. Could you write a rake task that deletes files in your `Downloads` folder that are older than 15 days?
* Use RSpec to review your Ruby with TestFirst.org: http://testfirst.org/learn_ruby
* Work through the [Ruby Koans](http://rubykoans.com/)
* Start experimenting with the JavaScript lessons on http://www.codecademy.com/

#### Asset Pipeline

Rails' Asset Pipeline is both interesting, valuable, and frustrating. Check out the [RailsCast](http://railscasts.com/episodes/279-understanding-the-asset-pipeline), [DHH's talk from RailsConf 2011](http://www.youtube.com/watch?v=cGdCI2HhfAU), and experiment with it in your Blogger app.

#### User Authentication

Most developers blindly rush in to using the Devise to handle authentication. As soon as you try and customize behavior, though, you're in for some pain. It's very interesting and valuable to dig into how these systems work.

Rails recently added the `has_secure_password` feature to make writing your own authentication easier. Try and add registration/login/logout to your Blogger app such that:

* Visitors can signup for an account
* Only authenticated users see the comment form
* Only admins can write, edit or delete articles

You can checkout [this blog post](http://www.farbeyondprogramming.com/2011/05/rails-user-authentication-using-has_secure_password/), the [Rails Security Guide](http://guides.rubyonrails.org/security.html#user-management), and this [RailsCast](http://railscasts.com/episodes/270-authentication-in-rails-3-1).

You should also read up on [hashing and salting passwords](http://crackstation.net/hashing-security.htm).

#### User Authorization

Once you have user authentication in place you typically need to layer on authorization. Check out [this RailsCast on CanCan](http://railscasts.com/episodes/192-authorization-with-cancan) or [this one on Declarative Authorization](http://railscasts.com/episodes/188-declarative-authorization).

If you didn't yet implement your own User Auth, it's reasonable and ok to use Devise to get going quickly so you can experiment with these tools.

#### Getting Started with jQuery

Work through the new [Try jQuery](http://try.jquery.com/) course to get familiar with the most popular JavaScript library.

#### Git Workflow

We're going to talk more about git workflow for teams next week, but you could get started by studying:

* http://yehudakatz.com/2010/05/13/common-git-workflows/
* http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html
* http://dymitruk.com/blog/2012/02/05/branch-per-feature/
* http://joslynesser.com/blog/archives/2010/09/06/git-workflow-for-small-teams/
