---
layout: page
title: Monday, June 17th
sidebar: true
---

## Daily Outline

* Warm-up
* Networking, Servers, and Ops
* Customer Check-Ins
* Reading Group: JavaScript Patterns
* Lightning Talk Kickoff

## Weekly Preview

* Tuesday
  * Revisiting Git Techniques
  * Project Work
* Wednesday
  * Using Pub/Sub
  * Project Work
* Thursday
  * Technical Check-Ins
  * Resume Workshop
  * Project Work
* Friday
  * Retrospective
  * Lightning Talks
  * Guest: Wil Moore III
  * 1-on-1s & Open Source

## Networking, Servers, and Deployment

### Part 1: What You Need To Know About Networking

#### Learning Goals

* Understand the format of IP addresses
* Understand how packets flow through the network
* Be able to explain the roles of:
  * DNS
  * Gateway
  * TCP/IP
  * Router
* Be familiar with basic network tooling including:
  * `ifconfig`
  * `ping`
  * `nslookup`

#### Conversation Notes

##### IP Addresses

* IPv4: 
  * Four octets, 0.0.0.0 to 255.255.255.255
* IPv6: 
  * Eight groups of four hexadecimal digits
  * Ex: `2001:0db8:85a3:0042:1000:8a2e:0370:7334`
* IPv4 and IPv6 address pool
  * "Every device" needs an IP address
  * Total pool size
  * IPv4 address exhaustion
* Many ranges and addresses are special
  * Ping `.255`
  * `10.0.0.*`
  * `192.168.*.*`
* Use `ifconfig` to find your addresses
* Use `ping` to...
  * check if another server is responding
  * get a sense of how long transmissions take ("ping time")
  * ...except that many web hosts disable "pingback"

#### DNS

* The need for name resolution
* DNS server hierarchy
* Local caching of DNS (and `dscacheutil -flushcache`)
* Use `nslookup`

#### Misc

* Port scanning with OS X Network Utility

### Part 2: Servers

#### Learning Goals

* Understand what a port is and why it's useful
* Build a conceptual model of how the ports on a server work
* Understand what a loopback address is
* Experiment with installing and configuring a reverse-proxy web server

#### Conversation Notes

* Servers & Ports
* Running Services
* Some of the most common:
  * Port 21 - FTP
  * Port 22 - SSH
  * Port 23 - Telnet
  * Port 25 - SMTP (Sending Mail)
  * Port 80 - HTTP
  * Port 110 - POP3
  * Port 443 - HTTPS
* Web browers assume port 80 for http
* Experimenting with Telnet

```
telnet jumpstartlab.com 80
GET http://jumpstartlab.com/today HTTP/1.0
```

* Loopback Addresses
  * `127.0.0.1`
  * `localhost`
  * `0.0.0.0`
* Local app & Telnet
  * Start an old Rails app on port 3000 (default)
  * Access it through your browser
  * Access it via telnet
  * Stop the Rails app
  * Restart it on port 80
  * Access it through your browser without specifying the port
  * Stop the Rails app and restart it on port 3000

##### Experiment with NGINX

Now let's try out using NGINX as a front-end web server. First, get it installed on your OS X system:

```bash
brew install nginx
```

Now you need to edit the configuration. You can use sublime text, vim, or nano:

```bash
nano /usr/local/etc/nginx/nginx.conf
```

Scroll down and change the `listen` line:

```raw
listen       80;
```

Scroll further and change the routing for the root address to proxy to port 3000:

```raw
location / {
  proxy_pass      http://127.0.0.1:3000;
}
```

Save the config file, then start up `nginx`:

```
sudo nginx
```

We need `sudo` because of the way OS X handles permissions on the ports.

Now, visit http://127.0.0.1 with no additional port. You're hitting port 80, it's getting proxied to 3000, then your Rails app is serving the request.

Why use a reverse proxy? At the NGINX level you can:

* Route requests to multiple apps running on the same server (based on domain name, file path, etc)
* Serve static assets quickly without hitting your server
* Enforce external network-based security

### Part 3: Deployment

#### Learning Goals

* Understand what a VPS server is and isn't
* Know how to SSH into a server
* Develop a conceptual model of how deployment works
* Understand the roles of...
  * SSH
  * Git Remote
  * Ruby server
  * Web server
  * Database server
  * Capistrano

#### Conversation Notes

* Having a "server"
  * Physical machine - "colocation"
  * Hypervisor - The OS of OSes
  * Shared machine - virtualized server, virtual private server (VPS)
  * Ifrastructure As A Service (IaaS)

##### Typical Deployment Process

1. SSH into the machine
2. Clone code via git
3. Run pending migrations
4. Restart the Ruby server(s)
5. Leave the proxy server alone

#### Experimenting with a VPS

Thanks to DigitalOcean, we can create VPS servers with reckless abandon! Each of you has been provisioned a VPS.

* Check your email for your server credentials
* [Setup a non-root user with password](https://www.digitalocean.com/community/articles/initial-server-setup-with-ubuntu-12-04)
* [Install NGINX](https://www.digitalocean.com/community/articles/how-to-install-nginx-on-ubuntu-12-04-lts-precise-pangolin)
* [Install Ruby and Rails](https://www.digitalocean.com/community/articles/how-to-install-ruby-on-rails-on-ubuntu-12-04-lts-precise-pangolin-with-rvm)
* [Install git](https://www.digitalocean.com/community/articles/how-to-install-git-on-ubuntu-12-04)
* [Install postgresql](http://hendrelouw73.wordpress.com/2013/04/29/how-to-install-postgresql-9-1-on-ubuntu-13-04-linux/)
* Switch to your user directory (`cd ~`), then clone one of your existing Rails projects from Github
* Bundle
* Run `rake db:create` then run your migrations
* Start the ruby server on port 3000
* Configure your NGINX to reverse proxy from port 80 to port 3000
* Restart NGINX (`sudo service nginx restart`)
* Visit http://yourip from a web browser and you should see your project! Or, more likely, it's time to debug :D

## Customer Check-Ins

Meet with Jeff in the Nook to review your stories. So...there should be stories.

* 12:25 -- RunTalk - Blair Anderson, Chelsea Komlo, Daniel Mee
* 12:50 -- SupportMe - John Maddux, Jorge Tellez, Laura Steadman
* 1:15 -- WeTube - Geoffrey Schorkopf, Kyle Suss, Logan Sears, Paul Blackwell
* 1:40 -- TrivialChat - Aimee Maher, Christopher Knight, Josh Mejia, Shane Rogers
* 2:05 -- Backchannel - Jennifer Eliuk, Kareem Grant, Phil Battos, Raphael Weiner
* 2:30 -- Quizzical - Bradley Sheehan, Danny Garcia, Elaine Tai, Erin Drummond

## Reading Group: JavaScript Patterns

Let's kick off Stoyan Stefanov's "JavaScript Patterns" book today with a reading session. For next Monday, please read and experiment with *chapters 1 through 5 (up to page 114)*. Take this hour to get started.

If you've already read that far, please try to gather with other students who have done the same and conduct some experiments, answer each other's questions, etc.

## Lightning Talk Kickoff

This week we'll have lightning talks from:

* Josh Mejia
* Erin Drummond
* Kareem Grant
* Paul Blackwell
* John Maddux
* Kyle Suss
